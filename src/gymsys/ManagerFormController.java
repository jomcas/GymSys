/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gymsys;

import com.jfoenix.controls.JFXButton;
import com.jfoenix.controls.JFXComboBox;
import com.jfoenix.controls.JFXDatePicker;
import com.jfoenix.controls.JFXTextArea;
import com.jfoenix.controls.JFXTextField;
import java.io.IOException;
import java.net.URL;
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.input.InputMethodEvent;
import javafx.scene.input.KeyEvent;
import javafx.scene.input.MouseEvent;
import javafx.stage.Stage;
import javax.swing.JOptionPane;
import model.CashierModel;
import model.EquipmentModel;
import model.InstructorModel;
import model.ManagerModel;

/**
 * FXML Controller class
 *
 * @author jomar
 */
public class ManagerFormController implements Initializable {

    @FXML
    private JFXButton equipmentDeleteBtn;
    @FXML
    private JFXButton equipmentUpdateBtn;
    @FXML
    private JFXButton equipmentAddBtn;
    @FXML
    private TableView<EquipmentModel> equipmentTable;
    @FXML
    private JFXTextField equipmentNameTF;
    @FXML
    private JFXComboBox<String> equipmentTypeCbox;
    @FXML
    private JFXDatePicker equipmentDateDP;
    @FXML
    private JFXTextField equipmentPriceTF;
    @FXML
    private JFXTextField equipmentQtyTF;
    @FXML
    private JFXTextField totalPriceTF;
    @FXML
    private TableView<InstructorModel> instructorTable;
    @FXML
    private JFXTextField instructorLastNameTF;
    @FXML
    private JFXTextField instructorFirstNameTF;
    @FXML
    private JFXTextArea instructorAddressTA;
    @FXML
    private JFXComboBox<String> instructorTimeShiftComboBox;
    @FXML
    private JFXButton instructorDeleteBtn;
    @FXML
    private JFXButton instructorUpdateBtn;
    @FXML
    private JFXButton instructorAddBtn;
    @FXML
    private TableColumn<EquipmentModel, String> equipmentIDTab;
    @FXML
    private TableColumn<EquipmentModel, String> equipmentNameTab;
    @FXML
    private TableColumn<EquipmentModel, String> equipmentDataReceivedTab;
    @FXML
    private TableColumn<EquipmentModel, String> equipmentPrice;
    @FXML
    private TableColumn<EquipmentModel, String> equipmentQuantity;
    @FXML
    private TableColumn<EquipmentModel, String> equipmentTotalPrice;
    @FXML
    private TableColumn<InstructorModel, String> instructorIDTab;
    @FXML
    private TableColumn<InstructorModel, String> instructorLastNameTab;
    @FXML
    private TableColumn<InstructorModel, String> instructorFirstNameTab;
    @FXML
    private TableColumn<InstructorModel, String> instructorAddressTab;
    @FXML
    private TableColumn<InstructorModel, String> instructorTimeShiftTab;
    @FXML
    private JFXButton backBtn;

    Connection con;
    PreparedStatement pst;
    ResultSet rs;
    int autoGeneratedID;
    /**
     * Initializes the controller class.
     */

    ObservableList<EquipmentModel> equipmentModel = FXCollections.observableArrayList();
    ObservableList<InstructorModel> instructorModel = FXCollections.observableArrayList();
    ObservableList<String> EquipmentData = FXCollections.observableArrayList("Weights", "Running", "Balance");
    ObservableList<String> InstructorData = FXCollections.observableArrayList("7:00 AM to 2:00PM", "2:00 PM to 9:00 PM");

    @Override
    public void initialize(URL url, ResourceBundle rb) {
        try {
            setup();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ManagerFormController.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @FXML
    private void handleEquipmentDeleteBtn(ActionEvent event) {
        //delete zone 
        String insertQuery = "delete from Equipment where Equipment_ID=" + equipmentID + "";

        try {
            pst = con.prepareStatement(insertQuery);
            pst.executeUpdate();
            JOptionPane.showMessageDialog(null, "Delete Successfully");

            equipmentModel.clear();
            populateEquipmentTable();
        } catch (SQLException ex) {
            Logger.getLogger(OwnerFormController.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @FXML
    private void handleEquipmentUpdateBtn(ActionEvent event) {
        java.util.Date date = java.util.Date.from(equipmentDateDP.getValue().atStartOfDay(ZoneId.systemDefault()).toInstant());
        java.sql.Date sqlDate = new java.sql.Date(date.getTime());

        String updateQuery = "update Equipment set Equipment_Desc = '" + equipmentNameTF.getText()
                + "', Equipment_Type = '" + equipmentTypeCbox.getSelectionModel().getSelectedItem().toString()
                + "', Date_Received = '" + sqlDate
                + "', Price=" + Double.parseDouble(equipmentPriceTF.getText())
                + ", Quantity=" + Integer.parseInt(equipmentQtyTF.getText())
                + ", TotalPrice=" + (Double.parseDouble(equipmentPriceTF.getText()) * Integer.parseInt(equipmentQtyTF.getText()))
                + "where Equipment_ID=" + equipmentID;

        System.out.println(updateQuery);
        try {
            pst = con.prepareStatement(updateQuery);

            pst.executeUpdate();
            JOptionPane.showMessageDialog(null, "Updated Successfully");
        } catch (SQLException ex) {
            Logger.getLogger(OwnerFormController.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Not Updated Successfully");
        }
    }

    @FXML
    private void handleEquipmentAddBtn(ActionEvent event) {
        java.util.Date date = java.util.Date.from(equipmentDateDP.getValue().atStartOfDay(ZoneId.systemDefault()).toInstant());
        java.sql.Date sqlDate = new java.sql.Date(date.getTime());
        insertEquipment(
                equipmentNameTF.getText(),
                equipmentTypeCbox.getSelectionModel().getSelectedItem().toString(),
                sqlDate,
                Double.parseDouble(equipmentPriceTF.getText()),
                Integer.parseInt(equipmentQtyTF.getText()),
                Double.parseDouble(equipmentPriceTF.getText()) * Integer.parseInt(equipmentQtyTF.getText())
        );

        equipmentModel.clear();
        populateEquipmentTable();

    }

    @FXML
    private void handleBackBtn(ActionEvent event) {
        try {
            Parent changeToReg = FXMLLoader.load(getClass().getResource("LoginForm.fxml"));
            Scene changeRegScene = new Scene(changeToReg);
            Stage mainStage = (Stage) ((Node) event.getSource()).getScene().getWindow();
            mainStage.setScene(changeRegScene);
            mainStage.centerOnScreen();
            mainStage.sizeToScene();
            mainStage.show();
        } catch (IOException ex) {
            Logger.getLogger(ManagerFormController.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void populateInstructorTable() {
        try {

            ResultSet rs = con.createStatement().executeQuery("select * from Instructor");

            while (rs.next()) {
                instructorModel.add(new InstructorModel(rs.getString(1), rs.getString(2),
                        rs.getString(3), rs.getString(4), rs.getString(5)));
            }

        } catch (SQLException ex) {
            Logger.getLogger(OwnerFormController.class.getName()).log(Level.SEVERE, null, ex);
        }

        instructorTable.setItems(instructorModel);
    }

    public void populateEquipmentTable() {

        try {

            ResultSet rs = con.createStatement().executeQuery("select * from Equipment");

            while (rs.next()) {
                equipmentModel.add(new EquipmentModel(rs.getString(1), rs.getString(2), rs.getString(3),
                        rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7)));
            }

        } catch (SQLException ex) {
            Logger.getLogger(OwnerFormController.class.getName()).log(Level.SEVERE, null, ex);
        }

        equipmentTable.setItems(equipmentModel);
    }

    public void insertEquipment(String equipmentName, String equipmentType, Date dateReceived, double price, int quantity, double totalPrice) {
        try {
            String insertQuery = "insert into equipment values (?,?,?,?,?,?)";
            pst = con.prepareStatement(insertQuery, Statement.RETURN_GENERATED_KEYS);

            pst.setString(1, equipmentName);
            pst.setString(2, equipmentType);
            pst.setDate(3, dateReceived);
            pst.setDouble(4, price);
            pst.setInt(5, quantity);
            pst.setDouble(6, totalPrice);

            pst.executeUpdate();

            rs = pst.getGeneratedKeys();
            rs.next();
            autoGeneratedID = rs.getInt(1);
        } catch (SQLException ex) {
            Logger.getLogger(ManagerFormController.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private EquipmentModel equipment;
    private String equipmentID;

    @FXML
    private void OnEquipmentTableDelete(MouseEvent event) {
        equipment = equipmentTable.getSelectionModel().getSelectedItem();
        String[] dateArr = equipment.getDateReceived().split("-");
        if (equipment != null) {
            equipmentNameTF.setText(equipment.getEquipmentName());
            equipmentTypeCbox.setValue(equipment.getEquipmentType());
            equipmentDateDP.setValue(LocalDate.of(Integer.parseInt(dateArr[0]), Integer.parseInt(dateArr[1]), Integer.parseInt(dateArr[2])));
            equipmentPriceTF.setText(equipment.getPrice());
            equipmentQtyTF.setText(equipment.getQuantity());
            totalPriceTF.setText(equipment.getTotalPrice());
            equipmentID = equipment.getEquipmentID();
        }
    }

    public void insertInstructor(String lastName, String firstName, String address, String timeShift) {
        try {
            String insertQuery = "insert into instructor values (?,?,?,?)";
            pst = con.prepareStatement(insertQuery, Statement.RETURN_GENERATED_KEYS);

            pst.setString(1, lastName);
            pst.setString(2, firstName);
            pst.setString(3, address);
            pst.setString(4, timeShift);

            pst.executeUpdate();

            rs = pst.getGeneratedKeys();
            rs.next();
            autoGeneratedID = rs.getInt(1);
        } catch (SQLException ex) {
            Logger.getLogger(ManagerFormController.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void setup() throws ClassNotFoundException {
        con = DBconnect.connect();
        equipmentTypeCbox.setItems(EquipmentData);
        instructorTimeShiftComboBox.setItems(InstructorData);

        equipmentIDTab.setCellValueFactory(new PropertyValueFactory<>("EquipmentID"));
        equipmentNameTab.setCellValueFactory(new PropertyValueFactory<>("EquipmentName"));
        equipmentDataReceivedTab.setCellValueFactory(new PropertyValueFactory<>("DateReceived"));
        equipmentPrice.setCellValueFactory(new PropertyValueFactory<>("Price"));
        equipmentQuantity.setCellValueFactory(new PropertyValueFactory<>("Quantity"));
        equipmentTotalPrice.setCellValueFactory(new PropertyValueFactory<>("TotalPrice"));

        instructorIDTab.setCellValueFactory(new PropertyValueFactory<>("InstructorID"));
        instructorLastNameTab.setCellValueFactory(new PropertyValueFactory<>("LastName"));
        instructorFirstNameTab.setCellValueFactory(new PropertyValueFactory<>("FirstName"));
        instructorAddressTab.setCellValueFactory(new PropertyValueFactory<>("Address"));
        instructorTimeShiftTab.setCellValueFactory(new PropertyValueFactory<>("Shift"));

        populateEquipmentTable();
        populateInstructorTable();
    }

    @FXML
    private void handleInsructorDeleteBtn(ActionEvent event) {
        //delete zone 

        String insertQuery = "delete from Instructor where Instructor_ID=" + Instructor_ID + "";
        try {
            pst = con.prepareStatement(insertQuery);
            pst.executeUpdate();

            JOptionPane.showMessageDialog(null, "Delete Successfully");

            instructorModel.clear();
            populateInstructorTable();
        } catch (SQLException ex) {
            Logger.getLogger(OwnerFormController.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @FXML
    private void handleInstructorUpdateBtn(ActionEvent event) {
        String updateQuery = "update Instructor set I_LastName= '" + instructorLastNameTF.getText()
                + "',I_FirstName='" + instructorFirstNameTF.getText()
                + "', I_Address='" + instructorAddressTA.getText()
                + "',TimeShift='" + instructorTimeShiftComboBox.getSelectionModel().getSelectedItem().toString()
                + "'where Instructor_ID=" + Instructor_ID + "";
        try {
            pst = con.prepareStatement(updateQuery);

            pst.executeUpdate();
            JOptionPane.showMessageDialog(null, "Updated Successfully");
        } catch (SQLException ex) {
            Logger.getLogger(OwnerFormController.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Not Updated Successfully");
        }

        instructorModel.clear();
        populateInstructorTable();
    }

    @FXML
    private void handleInstructorAddBtn(ActionEvent event) {
        insertInstructor(instructorLastNameTF.getText(),
                instructorFirstNameTF.getText(),
                instructorAddressTA.getText(),
                instructorTimeShiftComboBox.getSelectionModel().getSelectedItem().toString());

        JOptionPane.showMessageDialog(null, "Insert Instructor Successfully");

        instructorModel.clear();
        populateInstructorTable();
    }

    @FXML
    private void onQuantityChanged(KeyEvent event) {
        if (!equipmentQtyTF.getText().equals("")) {
            totalPriceTF.setText(Double.parseDouble(equipmentPriceTF.getText()) * Integer.parseInt(equipmentQtyTF.getText()) + "");
        }

    }

    private InstructorModel instructor;
    private String Instructor_ID;

    @FXML
    private void OnInstructorClicked(MouseEvent event) {
        instructor = instructorTable.getSelectionModel().getSelectedItem();

        if (instructor != null) {
            instructorLastNameTF.setText(instructor.getLastName());
            instructorFirstNameTF.setText(instructor.getFirstName());
            instructorAddressTA.setText(instructor.getAddress());
            instructorTimeShiftComboBox.setValue(instructor.getShift());
            Instructor_ID = instructor.getInstructorID();
        }
    }

}
