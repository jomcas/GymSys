package gymsys;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import model.CashierModel;
import com.jfoenix.controls.JFXButton;
import com.jfoenix.controls.JFXComboBox;
import com.jfoenix.controls.JFXPasswordField;
import com.jfoenix.controls.JFXTextArea;
import com.jfoenix.controls.JFXTextField;
import java.io.IOException;
import java.net.URL;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.input.MouseEvent;
import javafx.stage.Stage;
import javax.swing.JOptionPane;
import model.ManagerModel;

/**
 * FXML Controller class
 *
 * @author jomar
 */
public class OwnerFormController implements Initializable {

    @FXML
    private TableView<CashierModel> cashierTable;
    @FXML
    private TableView<ManagerModel> managerTable;
    @FXML
    private JFXButton cashierSaveBtn;
    @FXML
    private JFXButton cashierRefreshBtn;
    @FXML
    private JFXButton cashierDeleteBtn;
    @FXML
    private JFXTextField cashierLastNameTF;
    @FXML
    private JFXTextField cashierFirstNameTF;
    @FXML
    private JFXTextArea cashierAddressTF;
    @FXML
    private JFXComboBox<String> cashierShiftComboBox;
    @FXML
    private JFXButton managerSaveBtn;
    @FXML
    private JFXButton managerRefreshBtn;
    @FXML
    private JFXButton managerDeleteBtn;
    @FXML
    private JFXTextField managerLastNameTF;
    @FXML
    private JFXTextField managerFirstNameTF;
    @FXML
    private JFXTextArea managerAddressTF;
    @FXML
    private JFXComboBox<String> managerShiftComboBox;
    @FXML
    private JFXButton backBtn;
    @FXML
    private JFXTextField cashierUsernameTF;
    @FXML
    private JFXPasswordField cashierPasswordTF;
    @FXML
    private JFXPasswordField cashierConfirmPasswordTF;

    @FXML
    private JFXTextField managerUsernameTF;
    @FXML
    private JFXPasswordField managerPasswordTF;
    @FXML
    private JFXPasswordField managerConfirmPasswordTF;

    private TableView<CashierModel> table;

    @FXML
    private TableColumn<CashierModel, String> cashierID;

    @FXML
    private TableColumn<CashierModel, String> accountID;

    @FXML
    private TableColumn<CashierModel, String> Lastname;

    @FXML
    private TableColumn<CashierModel, String> Firstname;

    @FXML
    private TableColumn<CashierModel, String> Address;

    @FXML
    private TableColumn<CashierModel, String> shift;

    @FXML
    private TableColumn<ManagerModel, String> managerID;

    @FXML
    private TableColumn<ManagerModel, String> manageraAcountID;

    @FXML
    private TableColumn<ManagerModel, String> managerLastName;

    @FXML
    private TableColumn<ManagerModel, String> managerFirstName;

    @FXML
    private TableColumn<ManagerModel, String> managerAddress;

    @FXML
    private TableColumn<ManagerModel, String> managerShift;

    Connection con;
    PreparedStatement pst;
    ResultSet rs;
    int autoGeneratedID;
    String pattern = "^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&+=])(?=\\S+$).{8,}$";

    private CashierModel cashier;

    ObservableList<CashierModel> cashierModel = FXCollections.observableArrayList();
    ObservableList<ManagerModel> managerModel = FXCollections.observableArrayList();
    ObservableList<String> CashierData = FXCollections.observableArrayList("7:00 AM to 2:00PM", "2:00 PM to 9:00 PM");
    ObservableList<String> ManagerData = FXCollections.observableArrayList("7:00 AM to 2:00PM", "2:00 PM to 9:00 PM");
    @FXML
    private JFXButton cashierUpdateBtn;
    @FXML
    private JFXButton managerUpdateBtn1;

    /**
     * Initializes the controller class.
     */
    @Override
    public void initialize(URL url, ResourceBundle rb) {
        try {
            setup();
            populateCashierTable();
            populateManagerTable();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(OwnerFormController.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @FXML
    private void handleCashierSaveBtn(ActionEvent event) {
        if (cashierConfirmPasswordTF.getText().equals(cashierPasswordTF.getText()) && !cashierUsernameTF.getText().isEmpty() && !cashierPasswordTF.getText().isEmpty()) {
            if (cashierPasswordTF.getText().matches(pattern)) {
                insertAccount(cashierUsernameTF.getText(), cashierPasswordTF.getText(), 3);
                insertCashier(autoGeneratedID, cashierLastNameTF.getText(), cashierFirstNameTF.getText(), cashierAddressTF.getText(), cashierShiftComboBox.getSelectionModel().getSelectedItem().toString());
                JOptionPane.showMessageDialog(null, "Created Cashier Successfully!");
            } else {
                JOptionPane.showMessageDialog(null, "Password should contain at least a digit, an uppercase character, a lowercase character, a special character, no whitespace and must be at least 8 characters!");
                return;
            }

        } else {
            JOptionPane.showMessageDialog(null, "Password doesn't match or incomplete fields!");
        }

        cashierLastNameTF.clear();
        cashierFirstNameTF.clear();
        cashierAddressTF.clear();
        cashierShiftComboBox.setItems(CashierData);
        cashierUsernameTF.clear();
        cashierPasswordTF.clear();
        cashierConfirmPasswordTF.clear();

        cashierModel.clear();
        populateCashierTable();
    }

    @FXML
    private void handleCashierRefreshBtn(ActionEvent event) throws SQLException {
        cashierModel.clear();
        populateCashierTable();
    }

    private String Account_ID;

    @FXML
    private void handleCashierDeleteBtn(ActionEvent event) {

        //delete zone 
        String insertQuery = "delete from Cashier where Account_ID=" + Account_ID + "";
        String insertAccountQuery = "delete from Accounts where Account_ID=" + Account_ID + "";
        try {
            pst = con.prepareStatement(insertQuery);
            pst.executeUpdate();
            pst = con.prepareStatement(insertAccountQuery);
            pst.executeUpdate();
            JOptionPane.showMessageDialog(null, "Delete Successfully");

            cashierModel.clear();
            populateCashierTable();
        } catch (SQLException ex) {
            Logger.getLogger(OwnerFormController.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    @FXML
    private void handleManagerSaveBtn(ActionEvent event) {
        if (managerConfirmPasswordTF.getText().equals(managerPasswordTF.getText()) && !managerUsernameTF.getText().isEmpty() && !managerPasswordTF.getText().isEmpty()) {
            if (managerPasswordTF.getText().matches(pattern)) {
                insertAccount(managerUsernameTF.getText(), managerPasswordTF.getText(), 2);
                insertManager(autoGeneratedID, managerLastNameTF.getText(), managerFirstNameTF.getText(), managerAddressTF.getText(), managerShiftComboBox.getSelectionModel().getSelectedItem().toString());
                JOptionPane.showMessageDialog(null, "Created Manager Successfully!");
            } else {
                JOptionPane.showMessageDialog(null, "Password should contain at least a digit, an uppercase character, a lowercase character, a special character, no whitespace and must be at least 8 characters!");
                return;
            }
        } else {
            JOptionPane.showMessageDialog(null, "Password doesn't match or incomplete fields!");
        }

        managerLastNameTF.clear();
        managerFirstNameTF.clear();
        managerAddressTF.clear();
        managerShiftComboBox.setItems(CashierData);
        managerUsernameTF.clear();
        managerPasswordTF.clear();
        managerConfirmPasswordTF.clear();

        managerModel.clear();
        populateManagerTable();
    }

    @FXML
    private void handleManagerRefreshBtn(ActionEvent event) {
        managerModel.clear();
        populateManagerTable();
    }

    @FXML
    private void handleManagerDeleteBtn(ActionEvent event) {
        //delete zone 

        String insertQuery = "delete from Manager where Account_ID=" + Account_ID + "";
        String insertAccountQuery = "delete from Accounts where Account_ID=" + Account_ID + "";
        try {
            pst = con.prepareStatement(insertQuery);
            pst.executeUpdate();
            pst = con.prepareStatement(insertAccountQuery);
            pst.executeUpdate();
            JOptionPane.showMessageDialog(null, "Delete Successfully");

            managerModel.clear();
            populateCashierTable();
        } catch (SQLException ex) {
            Logger.getLogger(OwnerFormController.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @FXML
    private void handleBackBtn(ActionEvent event) {

        try {
            Parent changeToReg = FXMLLoader.load(getClass().getResource("LoginForm.fxml"));
            Scene changeRegScene = new Scene(changeToReg);
            Stage mainStage = (Stage) ((Node) event.getSource()).getScene().getWindow();
            mainStage.setScene(changeRegScene);
            mainStage.centerOnScreen();
            mainStage.sizeToScene();
            mainStage.show();
        } catch (IOException ex) {
            Logger.getLogger(OwnerFormController.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void insertAccount(String username, String password, int roleID) {
        try {
            String insertQuery = "insert into accounts values (?,HASHBYTES('SHA2_256',?),?)";
            pst = con.prepareStatement(insertQuery, Statement.RETURN_GENERATED_KEYS);

            pst.setString(1, username);
            pst.setString(2, password);
            pst.setInt(3, roleID);
            pst.executeUpdate();

            rs = pst.getGeneratedKeys();
            rs.next();
            autoGeneratedID = rs.getInt(1);

//            insertRoleAccount(roleID, autoGeneratedID);
        } catch (SQLException ex) {
            Logger.getLogger(OwnerFormController.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public void insertCashier(int accountID, String lastName, String firstName, String address, String shift) {
        try {
            String insertQuery = "insert into Cashier values (?,?,?,?,?)";
            pst = con.prepareStatement(insertQuery);

            pst.setInt(1, autoGeneratedID);
            pst.setString(2, lastName);
            pst.setString(3, firstName);
            pst.setString(4, address);
            pst.setString(5, shift);

            pst.executeUpdate();

        } catch (SQLException ex) {
            Logger.getLogger(OwnerFormController.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void insertManager(int accountID, String lastName, String firstName, String address, String shift) {
        try {
            String insertQuery = "insert into manager values (?,?,?,?,?)";
            pst = con.prepareStatement(insertQuery);

            pst.setInt(1, autoGeneratedID);
            pst.setString(2, lastName);
            pst.setString(3, firstName);
            pst.setString(4, address);
            pst.setString(5, shift);

            pst.executeUpdate();

        } catch (SQLException ex) {
            Logger.getLogger(OwnerFormController.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void insertRoleAccount(int roleID, int accountID) {
        try {
            String insertQuery = "insert into role_Account values (?,?)";
            pst = con.prepareStatement(insertQuery);

            pst.setInt(1, roleID);
            pst.setInt(2, accountID);

            pst.executeUpdate();

        } catch (SQLException ex) {
            Logger.getLogger(OwnerFormController.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void populateCashierTable() {

        try {

            ResultSet rs = con.createStatement().executeQuery("select * from Cashier");

            while (rs.next()) {
                cashierModel.add(new CashierModel(rs.getString(1), rs.getString(2), rs.getString(3),
                        rs.getString(4), rs.getString(5), rs.getString(6)));
            }

        } catch (SQLException ex) {
            Logger.getLogger(OwnerFormController.class.getName()).log(Level.SEVERE, null, ex);
        }

        cashierTable.setItems(cashierModel);
    }

    public void populateManagerTable() {

        try {

            ResultSet rs = con.createStatement().executeQuery("select * from Manager");

            while (rs.next()) {
                managerModel.add(new ManagerModel(rs.getString(1), rs.getString(2), rs.getString(3),
                        rs.getString(4), rs.getString(5), rs.getString(6)));
            }

        } catch (SQLException ex) {
            Logger.getLogger(OwnerFormController.class.getName()).log(Level.SEVERE, null, ex);
        }

        managerTable.setItems(managerModel);
    }

    public void setup() throws ClassNotFoundException {
        con = DBconnect.connect();
        cashierShiftComboBox.setItems(CashierData);
        managerShiftComboBox.setItems(ManagerData);

        cashierID.setCellValueFactory(new PropertyValueFactory<>("CashierID"));
        accountID.setCellValueFactory(new PropertyValueFactory<>("AccountID"));
        Lastname.setCellValueFactory(new PropertyValueFactory<>("LastName"));
        Firstname.setCellValueFactory(new PropertyValueFactory<>("FirstName"));
        Address.setCellValueFactory(new PropertyValueFactory<>("Address"));
        shift.setCellValueFactory(new PropertyValueFactory<>("Shift"));

        managerID.setCellValueFactory(new PropertyValueFactory<>("ManagerID"));
        manageraAcountID.setCellValueFactory(new PropertyValueFactory<>("AccountID"));
        managerLastName.setCellValueFactory(new PropertyValueFactory<>("LastName"));
        managerFirstName.setCellValueFactory(new PropertyValueFactory<>("FirstName"));
        managerAddress.setCellValueFactory(new PropertyValueFactory<>("Address"));
        managerShift.setCellValueFactory(new PropertyValueFactory<>("Shift"));

    }

    @FXML
    private void onTableCashierDelete(MouseEvent event) {

        cashier = cashierTable.getSelectionModel().getSelectedItem();

        if (cashier != null) {
            cashierLastNameTF.setText(cashier.getLastName());
            cashierFirstNameTF.setText(cashier.getFirstName());
            cashierAddressTF.setText(cashier.getAddress());
            cashierShiftComboBox.setValue(cashier.getShift());
            Account_ID = cashier.getAccountID();
        }
    }

    @FXML
    private void handleCashierUpdateBtn(ActionEvent event) {

        String updateQuery = "update Cashier set C_LastName= '" + cashierLastNameTF.getText()
                + "',C_FirstName='" + cashierFirstNameTF.getText()
                + "', C_Address='" + cashierAddressTF.getText()
                + "',TimeShift='" + cashierShiftComboBox.getSelectionModel().getSelectedItem().toString()
                + "' where Account_ID=" + Account_ID + "";
        System.out.println(updateQuery);
        try {
            pst = con.prepareStatement(updateQuery);

            pst.executeUpdate();
            JOptionPane.showMessageDialog(null, "Updated Successfully");
        } catch (SQLException ex) {
            Logger.getLogger(OwnerFormController.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Not Updated Successfully");
        }

        cashierModel.clear();
        populateCashierTable();

    }

    private ManagerModel manager;

    @FXML
    private void onTableManagerDelete(MouseEvent event) {

        manager = managerTable.getSelectionModel().getSelectedItem();

        if (manager != null) {
            managerLastNameTF.setText(manager.getLastName());
            managerFirstNameTF.setText(manager.getFirstName());
            managerAddressTF.setText(manager.getAddress());
            managerShiftComboBox.setValue(manager.getShift());
            Account_ID = manager.getAccountID();
        }
    }

    @FXML
    private void handleManagerUpdateBtn(ActionEvent event) {
        String updateQuery = "update Manager set M_LastName= '" + managerLastNameTF.getText()
                + "',M_FirstName='" + managerFirstNameTF.getText()
                + "', M_Address='" + managerAddressTF.getText()
                + "',TimeShift='" + managerShiftComboBox.getSelectionModel().getSelectedItem().toString()
                + "'where Account_ID=" + Account_ID + "";
        try {
            pst = con.prepareStatement(updateQuery);

            pst.executeUpdate();
            JOptionPane.showMessageDialog(null, "Updated Successfully");
        } catch (SQLException ex) {
            Logger.getLogger(OwnerFormController.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Not Updated Successfully");
        }

        managerModel.clear();
        populateManagerTable();
    }
}
